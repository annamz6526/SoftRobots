from stlib.scene import MainHeader
from stlib.visuals import ShowGrid
from stlib.solver import DefaultSolver
from stlib.physics.rigid import Floor

def createScene(rootNode):
	ShowGrid(rootNode)

	# A default gravity force is implemented on Sofa. Here we reset it, choosing millimeters as the length unit for the scene.
	MainHeader(rootNode, gravity=[0.0,-981.0,0.0])

	cube = rootNode.createChild("Cube")

	### Mechanical model

	totalMass = 1.0
	volume = 1.0
	inertiaMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]


	cube.createObject('MechanicalObject', name="DOF", template="Rigid3", showObject=True, showObjectScale=30.0, translation=[0.0,0.0,0.0], rotation=[0.0,0.0,0.0])
	cube.createObject('UniformMass', name="vertexMass", vertexMass=[totalMass, volume, inertiaMatrix[:]])

	# The following line defines the material behaviour when submitted to constraints; it is not necessary here, as no interaction between objects has been defined
	#cube.createObject('UncoupledConstraintCorrection')

	### Time integration and solver

	cube.createObject('EulerImplicitSolver', name='odesolver')
	cube.createObject('CGLinearSolver', name='Solver')


	### Visual Object of the Cube

	visual = cube.createChild("CubeVisual")
	# Graphic model based on a mesh
	visual.createObject("MeshObjLoader", name="loader", filename="mesh/smCube27.obj")
	visual.createObject('OglModel', name="Visual", src="@loader", color=[0.1,0.0,1.0], scale=20.0)
	# Building a correspondance between the mechanical and the graphical representation
	visual.createObject('RigidMapping')


	########################################
	### Adding the Floor for more fun ;) ###
	Floor(rootNode,
          translation=[0.0,-300.0,0.0],
          uniformScale=5.0,
          isAStaticObject=True)


	return rootNode
